// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_VGLL_0_H
#define WINRT_VGLL_0_H
WINRT_EXPORT namespace winrt::VGLL
{
    struct ISimpleMath;
    struct SimpleMath;
}
namespace winrt::impl
{
    template <> struct category<winrt::VGLL::ISimpleMath>{ using type = interface_category; };
    template <> struct category<winrt::VGLL::SimpleMath>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::VGLL::SimpleMath> = L"VGLL.SimpleMath";
    template <> inline constexpr auto& name_v<winrt::VGLL::ISimpleMath> = L"VGLL.ISimpleMath";
    template <> inline constexpr guid guid_v<winrt::VGLL::ISimpleMath>{ 0x74EBBEB5,0xB363,0x584E,{ 0xA3,0xC8,0x3E,0x1B,0xF3,0x0D,0x5A,0xF7 } }; // 74EBBEB5-B363-584E-A3C8-3E1BF30D5AF7
    template <> struct default_interface<winrt::VGLL::SimpleMath>{ using type = winrt::VGLL::ISimpleMath; };
    template <> struct abi<winrt::VGLL::ISimpleMath>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add(double, double, double*) noexcept = 0;
            virtual int32_t __stdcall subtract(double, double, double*) noexcept = 0;
            virtual int32_t __stdcall multiply(double, double, double*) noexcept = 0;
            virtual int32_t __stdcall divide(double, double, double*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_VGLL_ISimpleMath
    {
        WINRT_IMPL_AUTO(double) add(double firstNumber, double secondNumber) const;
        WINRT_IMPL_AUTO(double) subtract(double firstNumber, double secondNumber) const;
        WINRT_IMPL_AUTO(double) multiply(double firstNumber, double secondNumber) const;
        WINRT_IMPL_AUTO(double) divide(double firstNumber, double secondNumber) const;
    };
    template <> struct consume<winrt::VGLL::ISimpleMath>
    {
        template <typename D> using type = consume_VGLL_ISimpleMath<D>;
    };
}
#endif
